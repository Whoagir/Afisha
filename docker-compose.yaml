services:
  db:
    image: postgres:15
    restart: always
    env_file: .env.db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports: ["5432:5432"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U afisha"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    restart: always
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    ports: ["6379:6379"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  web:
    build: .
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             gunicorn afisha.wsgi:application -b 0.0.0.0:8000 -w 3"
    volumes: ["./src:/app"]
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports: ["8000:8000"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5

  worker_fast:
    build: .
    command: celery -A afisha worker -Q fast -l info
    volumes: ["./src:/app"]
    env_file: .env
    depends_on:
      - web

  worker_slow:
    build: .
    command: celery -A afisha worker -Q slow -l info
    volumes: ["./src:/app"]
    env_file: .env
    depends_on:
      - web

  beat:
    build: .
    command: celery -A afisha beat -l info --schedule=/tmp/celerybeat-schedule
    volumes:
      - "./src:/app"
    env_file: .env
    depends_on:
      - web

  flower:
    build: .
    command: celery -A afisha flower --port=5555
    ports: ["5555:5555"]
    env_file: .env
    depends_on:
      - web

volumes:
  postgres_data:
